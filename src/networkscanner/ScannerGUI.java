/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package networkscanner;
import it.sauronsoftware.ftp4j.FTPAbortedException;
import it.sauronsoftware.ftp4j.FTPDataTransferException;
import it.sauronsoftware.ftp4j.FTPException;
import it.sauronsoftware.ftp4j.FTPFile;
import it.sauronsoftware.ftp4j.FTPIllegalReplyException;
import it.sauronsoftware.ftp4j.FTPListParseException;
import java.io.IOException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import networkscanner.NetworkScanner; 
import networkscanner.Device; 
/**
 *
 * @author Isa
 */
public class ScannerGUI extends javax.swing.JFrame {

    /**
     * Creates new form ScannerGUI
     */
    
    
    public ScannerGUI() {
        initComponents();
        try { 
            sc.InitNetwork();
        } catch (SocketException ex) {
            Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        scanButton = new javax.swing.JButton();
        hostCombobox = new javax.swing.JComboBox<>();
        portScanButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        connectedDevicesArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        openPortsArea = new javax.swing.JTextArea();
        ftpButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        sshButton = new javax.swing.JButton();
        httpButton = new javax.swing.JButton();
        usernameField = new javax.swing.JTextField();
        hostInputField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        changeHostOption = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        statusOption = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        resetHostOption = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Network scanner");

        scanButton.setText("SCAN NETWORK");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        hostCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CHOOSE HOST" }));
        hostCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostComboboxActionPerformed(evt);
            }
        });

        portScanButton.setText("SCAN PORTS");
        portScanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portScanButtonActionPerformed(evt);
            }
        });

        connectedDevicesArea.setColumns(20);
        connectedDevicesArea.setRows(5);
        jScrollPane3.setViewportView(connectedDevicesArea);

        openPortsArea.setColumns(20);
        openPortsArea.setRows(5);
        jScrollPane4.setViewportView(openPortsArea);

        ftpButton.setText("SCAN FOR FTP");
        ftpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftpButtonActionPerformed(evt);
            }
        });

        loginButton.setText("LOGIN");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        sshButton.setText("SCAN FOR SSH");
        sshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sshButtonActionPerformed(evt);
            }
        });

        httpButton.setText("SCAN FOR HTTP");
        httpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                httpButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem3.setText("Open");
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator2);

        jMenuItem5.setText("Delete");
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator3);

        jMenuItem6.setText("Rename");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Options");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        changeHostOption.setText("Change host");
        changeHostOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeHostOptionActionPerformed(evt);
            }
        });
        jMenu3.add(changeHostOption);
        jMenu3.add(jSeparator1);

        statusOption.setText("Status");
        statusOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusOptionActionPerformed(evt);
            }
        });
        jMenu3.add(statusOption);
        jMenu3.add(jSeparator4);

        resetHostOption.setText("Reset host");
        resetHostOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHostOptionActionPerformed(evt);
            }
        });
        jMenu3.add(resetHostOption);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(httpButton)
                                        .addComponent(ftpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(usernameField)
                                        .addComponent(PasswordField))
                                    .addContainerGap())
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(sshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 7, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hostInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hostCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portScanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hostCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portScanButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hostInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(httpButton)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ftpButton)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sshButton)
                            .addComponent(loginButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        
        sc.ChangeState("ipscanner"); 
        sc.ClearConnectedDevices();  
        connectedDevicesArea.setText(""); 
        threads.clear(); 
        
        for(int i = 0; i <255; i++){
        threads.add(new Thread(new NetworkScanner(i, null, 0))); 
        }
        
        for (Thread thread: threads){
            thread.start();
        }
        
        for(Thread th:threads){
            try {
                th.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        sc.PrintConnectedDevices();
        threads.clear(); 
        sc.SortConnectedDevices(); 
        List<Device> connected = sc.getConnectedDevices(); 
        connectedDevicesArea.append("You are " + sc.getLocalHost() + "\n"); 
        connectedDevicesArea.append("Connected devices:\n"); 
        hostCombobox.removeAllItems();
        for(Device dev: connected){
            connectedDevicesArea.append(dev.getIp()+"\n"); 
            hostCombobox.addItem(dev.getIp()); 
        }
    }//GEN-LAST:event_scanButtonActionPerformed

    private void portScanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portScanButtonActionPerformed
        
        //String ip = hostInputField.getText(); 
        //if(hostInputField.getText().equals("")){
        String ip = hostCombobox.getItemAt(hostCombobox.getSelectedIndex());
        //}
        
        sc.ClearOpenPorts();
        openPortsArea.setText(""); 
        threads.clear();
        
        openPortsArea.setText("Scanning ports for ip \n" + ip);
        sc.setIpToScan(ip); 
        sc.ChangeState("portscanner"); 
        
        for(int i = 1; i<=2000; i++){
            threads.add(new Thread(new NetworkScanner(0, sc.getIpToScan(), i))); 
        }
        
        for (Thread th: threads){
            th.start(); 
        }
        
        for(Thread th:threads){
            try {
                th.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Exception in function portScanButtonActionPerformed(ActionEvent evt) in ScannerGUI when trying to join threads:\n" + ex.getMessage()); 
            }
           
        }
        threads.clear(); 
        if (sc.HasNoneOpenPorts()){
            openPortsArea.append("\nDevice has no open ports"); 
        }
        else{
            openPortsArea.append("\nscan done, open ports:\n");
        }
        
        List<Integer> open_ports = sc.getOpenPorts(); 
        for (int port: open_ports){
            System.out.println(Integer.toString(port)); 
            openPortsArea.append(Integer.toString(port)+"\n");
        }
    }//GEN-LAST:event_portScanButtonActionPerformed

    private void hostComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostComboboxActionPerformed
        
    }//GEN-LAST:event_hostComboboxActionPerformed

    private void sshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sshButtonActionPerformed
        
    }//GEN-LAST:event_sshButtonActionPerformed

    private void httpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_httpButtonActionPerformed
        
    }//GEN-LAST:event_httpButtonActionPerformed

    private void ftpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftpButtonActionPerformed
        sc.ClearOpenPorts(); 
        openPortsArea.setText(""); 
        String ip = hostCombobox.getItemAt(hostCombobox.getSelectedIndex());
        openPortsArea.setText("Scanning FTP port for ip \n" + ip);
        try {
            //sc.ScanFTP(ip);
            sc.client.connect(ip); 
            openPortsArea.setText("Found FTP server on " + ip + "\nInput credentials to login"); 
            sc.client.disconnect(true);
            
        } catch (Exception ex) {
            Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
            openPortsArea.setText("No FTP server on ip " + ip); 
        }
    }//GEN-LAST:event_ftpButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        try { 
            if(loginButton.getText().equals("LOGIN")){
                loginButton.setText("DISCONNECT");
                String usr = usernameField.getText();
                String pass = PasswordField.getText();       
                String ip = hostCombobox.getItemAt(hostCombobox.getSelectedIndex());
                sc.client.connect(ip); 
                sc.client.login(usr, pass);
                openPortsArea.setText("Succesfully connected to FTP server on  \n"+ ip);
                FTPFile[] list = sc.client.list();
                connectedDevicesArea.setText("Files on FTP server:\n\n"); 
                for (FTPFile file : list){
                    connectedDevicesArea.append(file.getName()+"\n");  
                }
                
            }
            else if (loginButton.getText().equals("DISCONNECT")){
                loginButton.setText("LOGIN"); 
                sc.client.disconnect(true); 
                openPortsArea.append("\nDisconnected"); 
                //set to false if we want to break connection without sending any advice to the server
                connectedDevicesArea.setText(""); 
                connectedDevicesArea.append("Connected devices:\n"); 
                for(Device dev: sc.getConnectedDevices()){
                    connectedDevicesArea.append(dev.getIp()+"\n"); 
                    hostCombobox.addItem(dev.getIp()); 
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ScannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_loginButtonActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void changeHostOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeHostOptionActionPerformed
        String ip = JOptionPane.showInputDialog(null, "input host (default localhost)");
        sc.setIpToScan(ip); 
    }//GEN-LAST:event_changeHostOptionActionPerformed

    private void statusOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusOptionActionPerformed
        String text = "Localhost: " + sc.getLocalHost(); 
        String ip = sc.getIpToScan();  
        if(ip==null || ip ==sc.getLocalHost().getHostAddress()){
            ip = "localhost"; 
        }
        text += "\nSubnetmask: "+ sc.getSubnetMask(); 
        text +="\nHost to scan: " + ip; 
        List<Integer> openPorts = sc.getOpenPorts(); 
        text += "\nOpen ports :"; 
        if (sc.HasNoneOpenPorts()){
            text+="None"; 
        }
        for (Integer port: openPorts){
            text += "\n" + port.toString(); 
        }
        JOptionPane.showMessageDialog(this,text);
    }//GEN-LAST:event_statusOptionActionPerformed

    private void resetHostOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetHostOptionActionPerformed
        sc.setIpToScan(sc.getLocalHost().getHostAddress());
        sc.ClearOpenPorts(); 
    }//GEN-LAST:event_resetHostOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScannerGUI().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JMenuItem changeHostOption;
    private javax.swing.JTextArea connectedDevicesArea;
    private javax.swing.JButton ftpButton;
    private javax.swing.JComboBox<String> hostCombobox;
    private javax.swing.JTextField hostInputField;
    private javax.swing.JButton httpButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextArea openPortsArea;
    private javax.swing.JButton portScanButton;
    private javax.swing.JMenuItem resetHostOption;
    private javax.swing.JButton scanButton;
    private javax.swing.JButton sshButton;
    private javax.swing.JMenuItem statusOption;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
    String state = "closed"; 
    List<Thread> threads = new ArrayList<>(); 
    NetworkScanner sc = new NetworkScanner(0, null, 0); 
}
